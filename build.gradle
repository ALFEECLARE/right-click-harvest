plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.7.+'
    id 'org.quiltmc.quilt-mappings-on-loom' version '4.0.0'
    id 'org.cadixdev.licenser' version '0.6.1'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
    if (System.getenv().get("gametest_minecraft_version")) {
        minecraft("com.mojang:minecraft:${System.getenv().get("gametest_minecraft_version")}")
    } else {
        minecraft("com.mojang:minecraft:${project.minecraft_version}")
    }

    mappings(loom.layered {
        addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:v2"))
    })

    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    include(modImplementation(fabricApi.module("fabric-gametest-api-v1", "0.51.0+1.18.2")))
}

loom {
    runs {
        gametest {
            server()
            name "Game Test"
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "build/gametest"
        }
    }
}

test.dependsOn runGametest

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
